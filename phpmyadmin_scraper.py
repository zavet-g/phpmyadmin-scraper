#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ phpMyAdmin –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ Python Junior Developer
"""

import requests
from bs4 import BeautifulSoup
import re
import json
from urllib.parse import urljoin, urlparse, parse_qs


class PhpMyAdminScraper:
    def __init__(self, base_url, username, password):
        self.base_url = base_url.rstrip('/')
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        self.token = None
        self.db_name = 'testDB'
        self.table_name = 'users'

    def get_login_page(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω"""
        try:
            response = self.session.get(f"{self.base_url}/index.php")
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            token_input = soup.find('input', {'name': 'token'})
            if token_input:
                self.token = token_input.get('value')
                print(f"‚úì –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {self.token[:20]}...")
            else:
                print("‚ö† –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def login(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ phpMyAdmin"""
        if not self.token:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            return False
            
        login_data = {
            'pma_username': self.username,
            'pma_password': self.password,
            'server': '1',
            'token': self.token
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/index.php",
                data=login_data,
                allow_redirects=True
            )
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if 'pma_username' in response.text or 'login' in response.url.lower():
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
            else:
                print("‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def navigate_to_database(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö testDB"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            response = self.session.get(f"{self.base_url}/index.php")
            response.raise_for_status()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö testDB
            db_url = f"{self.base_url}/index.php?db={self.db_name}"
            response = self.session.get(db_url)
            response.raise_for_status()
            
            print(f"‚úì –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö {self.db_name} –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def get_table_data(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
            table_url = f"{self.base_url}/index.php?db={self.db_name}&table={self.table_name}"
            response = self.session.get(table_url)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)
            data_table = soup.find('table', {'class': 'table_results'})
            if not data_table:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                tables = soup.find_all('table')
                for table in tables:
                    if 'table_results' in table.get('class', []):
                        data_table = table
                        break
            
            if not data_table:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = []
            header_row = data_table.find('tr')
            if header_row:
                # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                header_cells = header_row.find_all(['th', 'td'])
                headers = []
                for cell in header_cells:
                    text = cell.get_text(strip=True)
                    if text and text not in ['Edit', 'Copy', 'Delete']:
                        headers.append(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)
            rows = []
            data_rows = data_table.find_all('tr')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            
            for row in data_rows:
                cells = row.find_all(['td', 'th'])
                row_data = []
                for cell in cells:
                    text = cell.get_text(strip=True)
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ SQL-–∑–∞–ø—Ä–æ—Å—ã
                    if text and text not in ['Edit', 'Copy', 'Delete'] and not text.startswith('DELETE FROM'):
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                        clean_text = text.replace('DeleteDELETE FROM `users` WHERE `users`.`id` = ', '')
                        if clean_text and clean_text != text:  # –ï—Å–ª–∏ –±—ã–ª –æ—á–∏—â–µ–Ω
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —è—á–µ–π–∫—É
                        row_data.append(text)
                
                if row_data:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                    rows.append(row_data)
            
            if not headers and rows:
                # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–ª–æ–Ω–æ–∫
                headers = [f"–ö–æ–ª–æ–Ω–∫–∞ {i+1}" for i in range(len(rows[0]))]
            
            return {'headers': headers, 'rows': rows}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return None

    def display_data(self, data):
        """–í—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        if not data or not data['rows']:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        headers = data['headers']
        rows = data['rows']
        
        print("\n" + "="*80)
        print(f"–î–ê–ù–ù–´–ï –ò–ó –¢–ê–ë–õ–ò–¶–´ {self.table_name.upper()}")
        print("="*80)
        
        # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if headers:
            header_line = " | ".join(headers)
            print(header_line)
            print("-" * len(header_line))
        
        # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
        for row in rows:
            row_line = " | ".join(row)
            print(row_line)
        
        print(f"\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
        print("="*80)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ phpMyAdmin")
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {self.base_url}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.username}")
        print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db_name}")
        print(f"üìã –¢–∞–±–ª–∏—Ü–∞: {self.table_name}")
        print("-" * 50)
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not self.get_login_page():
            return False
        
        # –®–∞–≥ 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.login():
            return False
        
        # –®–∞–≥ 3: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not self.navigate_to_database():
            return False
        
        # –®–∞–≥ 4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data = self.get_table_data()
        if data:
            self.display_data(data)
            return True
        else:
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    BASE_URL = "http://185.244.219.162/phpmyadmin"
    USERNAME = "test"
    PASSWORD = "JHFBdsyf2eg8*"
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫—Ä–∞–ø–µ—Ä–∞
    scraper = PhpMyAdminScraper(BASE_URL, USERNAME, PASSWORD)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    success = scraper.run()
    
    if success:
        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")


if __name__ == "__main__":
    main() 